#!/bin/bash
#
# This script creates a password 
#
# Usage: see usage function
#

declare SCRIPTPATH="$0"
if [[ "$SCRIPTPATH" =~ / ]]; then
    if [[ ! "$SCRIPTPATH" =~ ^/ ]]; then SCRIPTPATH="$(cd "${SCRIPTPATH%.*}"; pwd)/${SCRIPTPATH##*/}"; fi
else
    SCRIPTPATH="$PWD/$SCRIPTPATH"
fi
declare SCRIPTDIR="${SCRIPTPATH%/*}"
declare SCRIPT="${SCRIPTPATH##*/}"
declare TAG="${SCRIPT%.*}"
declare VERSION=0.1

# version
# Writes the script version on the stdout
#
function version( ) {
    echo "$SCRIPT, ver. $VERSION"
}

# usage
# Writes the script usage on the stdout
#
function usage( ) {
    cat - << __EOT
$(version)
Generates a random password within the provided parameters.

Usage:
    $SCRIPT [<option> [<option> [...]]]
    
    Where <option> is one of:
      -P n[,m], --length=n[,m]  Password length; if only n is specified, it 
                                represents the desired password length; if n 
                                and m are both specified, must be n <= m, and 
                                it represents the minimal and maximal acceptable 
                                password sizes
      -s, --no-syms             Do not use symbols
      -d, --no-digits           Do not use digits
      -l, --no-lcase            Do not use lower case letters
      -u, --no-ucase            Do not use upper case letters
      -x, --x-sim-chars         Exclude similar characters
      
      -S n, --min-syms=n        Minimal number of symbols; can't be used with --no-syms
      -D n, --min-digits=n      Minimal number of digits; can't be used with --no-digits
      -L n, --min-lcase=n       Minimal number of lower case letters; can't be used with --no-digits
      -U n, --min-ucase=n       Minimal number of upper case letters; can't be used with --no-digits
      
    
__EOT
}

# error <message> [<rc>]
# Writes the <message> on the stderr; if <rc> is specified, exists with error code <rc>
#
function error( ) {
	echo "$TAG: $1" >&2
	if [[ -z "$2" ]]; then return; fi
	
	echo "use --help for extended help" >&2
	exit $2
}

declare CMDLNOPTS

CMDLNOPTS=`getopt -o 'P:sdluxS:D:L:U:' -l 'length:,no-syms,no-digits,no-lcase,no-ucase,x-sim-chars,min-syms:,min-digits:,min-lcase:,min-ucase:,help,version' -n "$TAG" -u -- "$@"`

if [[ $? -ne 0 ]]; then exit 1; fi

set -- $CMDLNOPTS

declare -A SHORTOPTS=( \
[-P]="--length" \
[-s]="--no-syms" \
[-d]="--no-digits" \
[-l]="--no-lcase" \
[-u]="--no-ucase" \
[-x]="--x-sim-chars" \
[-S]="--min-syms" \
[-D]="--min-digits" \
[-L]="--min-lcase" \
[-U]="--min-ucase" \
)

declare -A OPTVALS

while true; do
	declare OPT="${SHORTOPTS[$1]}"
	
	if [[ -z "$OPT" ]]; then OPT=$1; fi

	case "$OPT" in
		# expects 2nd argument: n or n,m
		--length)
			if [[ ! "$2" =~ ^[0-9]+(,[0-9]+)?$ ]]; then error "invalid length specification" 1; fi
			if [[ ! -z "${OPTVALS[--length]}" ]]; then error "password length specified more than once" 1; fi
			OPTVALS[--length]=$2
			shift
			;;
		
		# switch
		--no-syms|--no-digits|--no-lcase|--no-ucase|--x-sim-chars)
			if [[ -z "${OPTVALS[$OPT]}" ]]; then OPTVALS[$OPT]=1; else error "$1 specified twice"; fi
			;;
			
		# single value
		--min-syms|--min-digits|--min-lcase|--min-ucase)
			if [[ ! "$2" =~ ^[0-9]+$ ]]; then error "invalid $1 specification: $2" 1; fi
			if [[ ! -z "${OPTVALS[$OPT]}" ]]; then error "$1 overriden from ${OPTVALS[$OPT]} to $2"; fi
			OPTVALS[$OPT]=$2
			shift
			;;
			
		--version)
			version
			exit 0
			;;
			
		--help)
			usage
			exit 0
			;;

		--)
			shift
			break
			;;
			
		*)
			error "unexpected option: $1" 1
			;;
	esac
	shift
done

if [[ ! -z "$1" ]]; then error "unexpected option: $1" 2; fi
if [[ -z "${OPTVALS[--length]}" ]]; then error "password length not specified" 2; fi

# determine length
declare -i PWMINLEN
declare -i PWMAXLEN

eval $(echo ${OPTVALS[--length]} | awk -v FS="," '{print "PWMINLEN="$1";PWMAXLEN="(($2=="")?$1:$2)}')

if [[ $PWMINLEN -gt $PWMAXLEN ]]; then error "invalid password length specification: ${OPTVALS[--length]}" 2; fi

declare -i PWLEN

PWLEN=$(( ($RANDOM % ($PWMAXLEN - $PWMINLEN + 1)) + $PWMINLEN ))

# check the no-switches
declare -A SYMSETS=( \
[--no-syms]='[a-zA-Z0-9]' \
[--no-digits]='[^0-9]' \
[--no-lcase]='[^a-z]' \
[--no-ucase]='[^A-Z]' \
[--x-sim-chars]='[^b6cC(gq9G6Ll1I|O0S5VUZ2]' \
)

declare FILTER="tr -cd '[\041-\176]'"

for cls in ${!SYMSETS[*]}; do
	if [[ ! -z "${OPTVALS[$cls]}" ]]; then 
		declare KEY="--min${cls#--no}"
		
		if [[ ! -z "${OPTVALS[$KEY]}" ]]; then error "Can't specify options $cls and $KEY simultaneously" 2; fi
		FILTER="$FILTER | grep -Po '${SYMSETS[$cls]}'"; 
	fi
done

# the sum of the mins <= max len
MINLEN="${OPTVALS[--min-digits]}+${OPTVALS[--min-syms]}+${OPTVALS[--min-lcase]}+${OPTVALS[--min-ucase]}"

if [[ $(( `echo "$MINLEN+0" | sed -r 's/\+{2,}/+/g'` )) -gt $PWMAXLEN ]]; then
	error "specified minimun values are greater than the maximun password size" 2
fi

eval "head -c 50000 < /dev/urandom | $FILTER" | 
	grep -Po . |
	awk -v dbg=1 -v PWL=$PWLEN -v S="${OPTVALS[--min-syms]}" -v D="${OPTVALS[--min-digits]}" -v L="${OPTVALS[--min-lcase]}" -v U="${OPTVALS[--min-ucase]}" -f <( 
	cat - << __EOS
	
	BEGIN{
		lims["S"]=S+0
		lims["D"]=D+0
		lims["L"]=L+0
		lims["U"]=U+0
		
		pass=""
	}

	(length(pass)==PWL){ exit 0 }
	
	{
		if( match( \$1, /[a-z]/ ) )
			cat="L"
		else if( match( \$1, /[A-Z]/ ) )
			cat="U"
		else if( match( \$1, /[0-9]/ ) )
			cat="D"
		else 
			cat="S"
			
		if( lims[cat] > 0 ) {
			pass=pass""\$1
			lims[cat]--
		}
		else if( (PWL-length(pass)-lims["S"]-lims["D"]-lims["L"]-lims["U"]) > 0 ) {
			pass=pass""\$1
		}
	}
	
	END {
		print pass
	}
	
__EOS
)
